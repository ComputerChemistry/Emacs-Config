#+title: CompChem Personal Emacs Config 
#+author: ComputerChemistry 

* Table of Contents :toc:
- [[#important-packages-to-load-first][Important Packages to Load First]]
  - [[#require-modules-from-modules][Require Modules from /modules]]
  - [[#package-manager-module][Package-Manager Module]]
  - [[#default-module][Default Module]]

* Important Packages to Load First 
** Require Modules from /modules 

 #+begin_src emacs-lisp 
;;(add-to-list 'load-path "~/.config/emacs/modules")
(let ((default-directory "~/.config/emacs/modules/"))
    (normal-top-level-add-subdirs-to-load-path))  ;; Modules level directory 
    (require 'compchem-elpaca) ;; The Elpaca Package Manager
    (require 'compchem-usepackage)
    (require 'compchem-async)
    (require 'compchem-server)
    (require 'compchem-benchmark-init)
    (require 'compchem-no-littering)
    (require 'compchem-whicher)
    (require 'compchem-tree-sitter)   ;; Buffer-move for better window management
    (require 'compchem-ui) 
    (require 'compchem-transparency) 
    (require 'compchem-font) ;; customize fonts
    (require 'compchem-trash)
    (require 'compchem-temporary)
    (require 'compchem-gdb)
    (require 'compchem-dashboard)
    (require 'compchem-restart-emacs)
    (require 'compchem-sudo-edit)
    (require 'compchem-link-hint)
    (require 'compchem-tldr)
    (require 'compchem-pdf-tools)
    (require 'compchem-latex) ;; latex stuff
    (require 'compchem-package-repos) ;; package repositories to load
    (require 'compchem-keybindings) ;; emacs keybings 
    (require 'compchem-theme) ;;user interface packages 
    (require 'compchem-neotree)
    (require 'compchem-projectile) ;; tool for manage projects in emacs 
    (require 'compchem-company)
    (require 'compchem-nerd-font) ;; install required fonts 
    (require 'compchem-centaur-tabs) ;; tabs for manager buffers 
    (require 'compchem-minions)
    (require 'compchem-emoji)
    (require 'compchem-solaire) 
    (require 'compchem-rainbow-mode) ;; syntax highlight for programming languages
    (require 'compchem-all-the-icons) ;; icons support for buffer management 
    (require 'compchem-counsel)
    (require 'compchem-dired-open)
    (require 'compchem-youtube)
    (require 'compchem-eww)
    (require 'compchem-eaf-framework)
    (require 'compchem-perspective)
    (require 'compchem-app-launchers)
    (require 'compchem-ivy)
    (require 'compchem-highlight-indent-guides)
    (require 'compchem-highlight-numbers)
    (require 'compchem-beacon) ;;color cursos tool 
    (require 'compchem-olivetti) 
    (require 'compchem-alert)
    (require 'compchem-comment)
    (require 'compchem-fancy-battery)
    (require 'compchem-nov-xwidget)
    (require 'compchem-dimish)
    (require 'compchem-try)
    (require 'compchem-volatile-highlights)
    (require 'compchem-org-mode)
    (require 'compchem-toc-org)
    (require 'compchem-hl-todo)
    (require 'compchem-org-latex)
    (require 'compchem-pgmacs)
    (require 'compchem-evil)
    (require 'compchem-which-key)
    (require 'compchem-peep-dired)
    (require 'compchem-eshell)
    (require 'compchem-vterm)
    (require 'compchem-git)
    (require 'compchem-flycheck)
    (require 'compchem-pyenv)
    (require 'compchem-markdown-mode)
    (require 'compchem-rust-mode)
    (require 'compchem-go-mode)
    (require 'compchem-json-mode)
    (require 'compchem-vimrc-mode)
    (require 'compchem-rjsx-mode)
    (require 'compchem-yaml-mode)
    (require 'compchem-typescript-mode)
    (require 'compchem-lua-mode)
    (require 'compchem-lsp-mode)
    (require 'compchem-format-all)
    (require 'compchem-emmet-mode)
    (require 'compchem-web-mode)
    (require 'compchem-slime)
    (require 'compchem-erlang)
    (require 'compchem-racket-mode)
    (require 'compchem-paredit)
    (require 'compchem-modern-cpp-font-lock)
    (require 'compchem-cpp-auto-include)
    (require 'compchem-cmake-font-lock)
    (require 'compchem-kubernetes)
    (require 'compchem-docker)
#+end_src 

** Package-Manager Module 
*** Package Repositories 
#+begin_src emacs-lisp 

 (require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
 ;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
;;(package-initialize)

(setq package-archive-priorities
      '(("melpa" .  4)
        ("melpa-stable" . 3)
        ("org" . 2)
        ("gnu" . 1)))

;;; Generic packages
(require 'package)
;; Select the folder to store packages
;; Comment / Uncomment to use desired sites
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory)
      package-archives
      '(("gnu"   . "https://elpa.gnu.org/packages/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/"))
      package-quickstart nil)
;; ("cselpa" . "https://elpa.thecybershadow.net/packages/")
;; ("melpa-cn" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
;; ("gnu-cn"   . "http://mirrors.cloud.tencent.com/elpa/gnu/"))

;; Configure Package Manager
(unless (bound-and-true-p package--initialized)
  (setq package-enable-at-startup nil) ; To prevent initializing twice
  (package-initialize))

;; set use-package-verbose to t for interpreted .emacs,
;; and to nil for byte-compiled .emacs.elc.
(eval-and-compile
  (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))
#+end_src

*** Elpaca-Setup
 #+begin_src emacs-lisp 
(defvar elpaca-installer-version 0.10)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

 ;;Configurar elpaca-use-package
(elpaca elpaca-use-package
  (elpaca-use-package-mode))

 (provide 'compchem-elpaca)
 #+end_src

*** Use-Package 
#+begin_src emacs-lisp 
;; Install use-package if not installed
(eval-and-compile
  (unless (and (fboundp 'package-installed-p)
               (package-installed-p 'use-package))
    (package-refresh-contents) ; update archives
    (package-install 'use-package)) ; grab the newest use-package
  (if init-file-debug
      (setq use-package-compute-statistics t)
    (setq use-package-compute-statistics nil))
  (require 'use-package))

;; Configure use-package
(use-package use-package
  :custom
  (use-package-verbose t)
  (use-package-always-ensure t)  ; :ensure t by default
  (use-package-always-defer nil) ; :defer t by default
  (use-package-expand-minimally t)
  (use-package-enable-imenu-support t))

 (provide 'compchem-usepackage)
#+end_src

*** Try
#+begin_src emacs-lisp 
(use-package try
  :defer t)

 (provide 'compchem-try)
#+end_src 

** Default Module 
*** UI 
 #+begin_src emacs-lisp
 ;; Configuración del tamaño y posición de la ventana
(setq initial-frame-alist
      '((top . 0)     ;; Posición desde la parte superior de la pantalla
        (left . 0)    ;; Posición desde el borde izquierdo de la pantalla
        (width . 120) ;; Ancho de la ventana en columnas
        (height . 35))) ;; Alto de la ventana en líneas


 (delete-selection-mode 1)    ;; You can select text and delete it by typing.
 (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
 (electric-pair-mode 1)       ;; Turns on automatic parens pairing

 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)


 (menu-bar-mode -1)           ;; Disable the menu bar 
 (scroll-bar-mode -1)         ;; Disable the scroll bar
 (tool-bar-mode -1)           ;; Disable the tool bar


 ;;line numbers
 (global-display-line-numbers-mode 1)
 (setq display-line-numbers-type 'relative) 
 

 (provide 'compchem-ui)
 #+end_src 

*** Font 
#+begin_src emacs-lisp 

(set-face-attribute 'default nil
  :font "Iosevka"
  :height 110)
 ;; :weight 'regular)
 (set-face-attribute 'variable-pitch nil
  :font "Iosevka"
  :height 110)
 ;; :weight 'regular)
(set-face-attribute 'fixed-pitch nil
  :font "Iosevka"
  :height 110)
 ;; :weight 'regular)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
;;(add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font-10"))
(setq-default line-spacing 0.20)

;;Uncomment the following line if line spacing needs adjusting.
;;(setq-default line-spacing 0.20)


;; Márgenes en los lados
(setq-default left-margin-width 4)  ;; Márgenes laterales más cómodos
(setq-default right-margin-width 4) ;; Márgenes laterales más cómodos

(set-window-buffer nil (current-buffer))

(add-to-list 'default-frame-alist '(font . "Iosevka-11"))  ;; Fuente para emacsclient
(global-font-lock-mode 1)    

 (provide 'compchem-font)

;;; compchem-font.el ends here
#+end_src 
